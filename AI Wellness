<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Aura Wellness - AI Personalized Health Plans</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
        }
        .gradient-bg {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        }
        .form-section {
            display: block;
        }
        .hidden {
            display: none;
        }
        canvas {
            max-width: 100%;
            height: auto !important;
        }
        button {
            min-height: 48px;
            min-width: 48px;
        }
        html {
            scroll-behavior: smooth;
        }
        /* Ensure AI-generated tables are responsive */
        #plan-content table {
            @apply table-auto w-full;
        }
        #plan-content th, #plan-content td {
            @apply border border-gray-300 px-2 sm:px-4 py-2 text-sm sm:text-base;
        }
        #plan-content ul, #plan-content ol {
            @apply list-disc list-inside space-y-2 text-sm sm:text-base;
        }
        #plan-content p, #plan-content h3, #plan-content h4 {
            @apply mb-4 text-gray-700;
        }
    </style>
</head>
<body class="bg-gray-50 text-gray-800">
    <!-- Header -->
    <header class="bg-white shadow-md sticky top-0 z-50">
        <nav class="container mx-auto px-4 sm:px-6 py-4 flex justify-center items-center">
            <h1 class="text-2xl sm:text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-indigo-500 to-purple-600">Aura Wellness</h1>
        </nav>
    </header>

    <!-- Main Content -->
    <main class="container mx-auto px-4 sm:px-6 py-8 sm:py-12">
        <!-- Hero Section -->
        <section id="hero" class="text-center mb-12 sm:mb-16">
            <h2 class="text-3xl sm:text-4xl md:text-5xl font-extrabold mb-4 leading-tight">Craft Your Wellness Journey with AI</h2>
            <p class="text-base sm:text-lg text-gray-600 max-w-3xl mx-auto mb-6 sm:mb-8">Get personalized nutrition and fitness plans designed by AI to achieve your health goals.</p>
            <button id="getStartedBtn" class="bg-indigo-600 text-white font-bold py-3 px-6 sm:px-8 rounded-full text-base sm:text-lg hover:bg-indigo-700 transition transform hover:scale-105 duration-300">Create My Plan Now</button>
        </section>

        <!-- Onboarding Form -->
        <section id="onboarding" class="hidden max-w-4xl mx-auto bg-white p-6 sm:p-8 rounded-2xl shadow-lg">
            <h3 class="text-2xl sm:text-3xl font-bold text-center mb-6 sm:mb-8">Tell Us About Yourself</h3>
            <div id="form-container">
                <!-- Step 1: Goals -->
                <div id="step1" class="form-section">
                    <h4 class="text-lg sm:text-xl font-semibold mb-4">What's your primary goal?</h4>
                    <div class="grid grid-cols-2 sm:grid-cols-3 gap-3 sm:gap-4">
                        <label class="p-3 sm:p-4 border border-gray-200 rounded-lg cursor-pointer hover:border-indigo-500 transition">
                            <input type="radio" name="goal" value="Weight Loss" class="sr-only" checked>
                            <div class="text-center">
                                <span class="text-3xl sm:text-4xl">üìâ</span>
                                <p class="font-semibold mt-2 text-sm sm:text-base">Weight Loss</p>
                            </div>
                        </label>
                        <label class="p-3 sm:p-4 border border-gray-200 rounded-lg cursor-pointer hover:border-indigo-500 transition">
                            <input type="radio" name="goal" value="Muscle Gain" class="sr-only">
                            <div class="text-center">
                                <span class="text-3xl sm:text-4xl">üí™</span>
                                <p class="font-semibold mt-2 text-sm sm:text-base">Muscle Gain</p>
                            </div>
                        </label>
                        <label class="p-3 sm:p-4 border border-gray-200 rounded-lg cursor-pointer hover:border-indigo-500 transition">
                            <input type="radio" name="goal" value="Improve Fitness" class="sr-only">
                            <div class="text-center">
                                <span class="text-3xl sm:text-4xl">üèÉ‚Äç‚ôÄÔ∏è</span>
                                <p class="font-semibold mt-2 text-sm sm:text-base">Improve Fitness</p>
                            </div>
                        </label>
                        <label class="p-3 sm:p-4 border border-gray-200 rounded-lg cursor-pointer hover:border-indigo-500 transition">
                            <input type="radio" name="goal" value="Better Nutrition" class="sr-only">
                            <div class="text-center">
                                <span class="text-3xl sm:text-4xl">ü•ó</span>
                                <p class="font-semibold mt-2 text-sm sm:text-base">Better Nutrition</p>
                            </div>
                        </label>
                        <label class="p-3 sm:p-4 border border-gray-200 rounded-lg cursor-pointer hover:border-indigo-500 transition">
                            <input type="radio" name="goal" value="Increase Energy" class="sr-only">
                            <div class="text-center">
                                <span class="text-3xl sm:text-4xl">‚ö°Ô∏è</span>
                                <p class="font-semibold mt-2 text-sm sm:text-base">Increase Energy</p>
                            </div>
                        </label>
                        <label class="p-3 sm:p-4 border border-gray-200 rounded-lg cursor-pointer hover:border-indigo-500 transition">
                            <input type="radio" name="goal" value="Stress Reduction" class="sr-only">
                            <div class="text-center">
                                <span class="text-3xl sm:text-4xl">üßò</span>
                                <p class="font-semibold mt-2 text-sm sm:text-base">Stress Reduction</p>
                            </div>
                        </label>
                    </div>
                    <button onclick="nextStep(2)" class="mt-6 sm:mt-8 w-full bg-indigo-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-indigo-700 transition">Next</button>
                </div>

                <!-- Step 2: Biometrics -->
                <div id="step2" class="form-section hidden">
                    <h4 class="text-lg sm:text-xl font-semibold mb-4">Your Biometrics</h4>
                    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6">
                        <div>
                            <label for="age" class="font-semibold text-sm sm:text-base">Age</label>
                            <input type="number" id="age" placeholder="e.g., 28" class="w-full mt-2 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500">
                        </div>
                        <div>
                            <label for="gender" class="font-semibold text-sm sm:text-base">Gender</label>
                            <select id="gender" class="w-full mt-2 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500">
                                <option>Female</option>
                                <option>Male</option>
                                <option>Non-binary</option>
                                <option>Prefer not to say</option>
                            </select>
                        </div>
                        <div>
                            <label for="height" class="font-semibold text-sm sm:text-base">Height (cm)</label>
                            <input type="number" id="height" placeholder="e.g., 175" class="w-full mt-2 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500">
                        </div>
                        <div>
                            <label for="weight" class="font-semibold text-sm sm:text-base">Weight (kg)</label>
                            <input type="number" id="weight" placeholder="e.g., 70" class="w-full mt-2 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500">
                        </div>
                    </div>
                    <div class="flex flex-col sm:flex-row justify-between mt-6 sm:mt-8 gap-4">
                        <button onclick="prevStep(1)" class="bg-gray-300 text-gray-800 font-bold py-3 px-6 rounded-lg hover:bg-gray-400 transition">Back</button>
                        <button onclick="nextStep(3)" class="bg-indigo-600 text-white font-bold py-3 px-6 rounded-lg hover:bg-indigo-700 transition">Next</button>
                    </div>
                </div>

                <!-- Step 3: Lifestyle -->
                <div id="step3" class="form-section hidden">
                    <h4 class="text-lg sm:text-xl font-semibold mb-4">Your Lifestyle</h4>
                    <div class="space-y-4 sm:space-y-6">
                        <div>
                            <label for="activityLevel" class="font-semibold text-sm sm:text-base">Activity Level</label>
                            <select id="activityLevel" class="w-full mt-2 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500">
                                <option value="sedentary">Sedentary</option>
                                <option value="lightly_active">Lightly Active</option>
                                <option value="moderately_active">Moderately Active</option>
                                <option value="very_active">Very Active</option>
                                <option value="extra_active">Extra Active</option>
                            </select>
                        </div>
                        <div>
                            <label for="diet" class="font-semibold text-sm sm:text-base">Dietary Preferences</label>
                            <input type="text" id="diet" placeholder="e.g., Vegan, Gluten-Free" class="w-full mt-2 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500">
                        </div>
                    </div>
                    <div class="flex flex-col sm:flex-row justify-between mt-6 sm:mt-8 gap-4">
                        <button onclick="prevStep(2)" class="bg-gray-300 text-gray-800 font-bold py-3 px-6 rounded-lg hover:bg-gray-400 transition">Back</button>
                        <button id="generatePlanBtn" class="bg-green-500 text-white font-bold py-3 px-6 rounded-lg hover:bg-green-600 transition">Generate My AI Plan</button>
                    </div>
                </div>
            </div>

            <!-- Loading Spinner -->
            <div id="loading" class="hidden text-center py-8 sm:py-12">
                <svg class="animate-spin h-10 sm:h-12 w-10 sm:w-12 text-indigo-600 mx-auto" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                    <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                </svg>
                <p class="mt-4 text-base sm:text-lg font-semibold">Crafting your personalized plan...</p>
            </div>
        </section>

        <!-- AI Plan Display Section -->
        <section id="plan-display" class="hidden max-w-4xl sm:max-w-5xl mx-auto mt-8 sm:mt-12">
            <div class="text-center mb-8 sm:mb-12">
                <h2 class="text-3xl sm:text-4xl font-bold">Your AI Wellness Plan</h2>
                <p class="text-gray-600 mt-2 text-sm sm:text-base">Follow this plan consistently for best results.</p>
            </div>
            <div id="plan-content" class="bg-white p-6 sm:p-8 rounded-2xl shadow-lg overflow-x-auto"></div>
            <div class="text-center mt-6 sm:mt-8">
                <button id="start-tracking-btn" class="bg-green-500 text-white font-bold py-2 px-5 rounded-lg hover:bg-green-600 transition">Start Tracking Progress</button>
                <!-- Commenting out social sharing buttons; uncomment to re-enable -->
                <!--
                <div class="flex flex-col sm:flex-row justify-center space-y-4 sm:space-y-0 sm:space-x-4 mt-4">
                    <button onclick="share('Twitter')" class="bg-blue-400 text-white font-semibold py-2 px-5 rounded-lg hover:bg-blue-500 transition">Share on Twitter</button>
                    <button onclick="share('Facebook')" class="bg-blue-600 text-white font-semibold py-2 px-5 rounded-lg hover:bg-blue-700 transition">Share on Facebook</button>
                </div>
                -->
            </div>
        </section>

        <!-- Progress Tracking Section -->
        <section id="progress-tracker" class="hidden max-w-4xl mx-auto mt-8 sm:mt-12">
            <div class="text-center mb-8 sm:mb-12">
                <h2 class="text-3xl sm:text-4xl font-bold">Track Your Progress</h2>
                <p class="text-gray-600 mt-2 text-sm sm:text-base">Log your weight to monitor your journey.</p>
            </div>
            <div class="bg-white p-6 sm:p-8 rounded-2xl shadow-lg">
                <div class="grid grid-cols-1 sm:grid-cols-2 gap-6 sm:gap-8 items-start">
                    <div>
                        <h3 class="text-xl sm:text-2xl font-semibold mb-4">Log New Entry</h3>
                        <div class="space-y-4">
                            <div>
                                <label for="log-date" class="font-semibold text-sm sm:text-base">Date</label>
                                <input type="date" id="log-date" class="w-full mt-2 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500">
                            </div>
                            <div>
                                <label for="log-weight" class="font-semibold text-sm sm:text-base">Weight (kg)</label>
                                <input type="number" id="log-weight" placeholder="e.g., 69.5" class="w-full mt-2 p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-indigo-500">
                            </div>
                            <button id="add-log-btn" class="w-full bg-indigo-600 text-white font-bold py-3 rounded-lg hover:bg-indigo-700 transition">Add Log</button>
                        </div>
                    </div>
                    <div class="w-full">
                        <canvas id="progressChart"></canvas>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <!-- Footer -->
    <footer class="bg-gray-800 text-white py-6 sm:py-8 text-center">
        <p class="text-sm sm:text-base">&copy; 2024 Aura Wellness. All rights reserved.</p>
    </footer>

    <script>
        // DOM Elements
        const getStartedBtn = document.getElementById('getStartedBtn');
        const heroSection = document.getElementById('hero');
        const onboardingSection = document.getElementById('onboarding');
        const generatePlanBtn = document.getElementById('generatePlanBtn');
        const loadingSection = document.getElementById('loading');
        const formContainer = document.getElementById('form-container');
        const planDisplaySection = document.getElementById('plan-display');
        const planContent = document.getElementById('plan-content');
        const startTrackingBtn = document.getElementById('start-tracking-btn');
        const progressTrackerSection = document.getElementById('progress-tracker');

        // Debug button click
        if (!getStartedBtn) {
            console.error("getStartedBtn not found in DOM");
        } else {
            getStartedBtn.addEventListener('click', () => {
                console.log("Create My Plan Now button clicked");
                heroSection.classList.add('hidden');
                onboardingSection.classList.remove('hidden');
            });
        }

        // Form navigation
        function nextStep(step) {
            document.getElementById(`step${step - 1}`).classList.add('hidden');
            document.getElementById(`step${step}`).classList.remove('hidden');
        }

        function prevStep(step) {
            document.getElementById(`step${step + 1}`).classList.add('hidden');
            document.getElementById(`step${step}`).classList.remove('hidden');
        }

        generatePlanBtn.addEventListener('click', async () => {
            // Gather form data
            const goal = document.querySelector('input[name="goal"]:checked')?.value;
            const age = document.getElementById('age').value;
            const gender = document.getElementById('gender').value;
            const height = document.getElementById('height').value;
            const weight = document.getElementById('weight').value;
            const activityLevel = document.getElementById('activityLevel').value;
            const diet = document.getElementById('diet').value;

            // Validation
            if (!goal || !age || !height || !weight) {
                alert("Please fill in all required fields.");
                return;
            }

            // Show loading spinner
            formContainer.classList.add('hidden');
            loadingSection.classList.remove('hidden');

            // Construct AI prompt
            const userPrompt = `
                Act as an expert nutritionist and certified personal trainer. Create a comprehensive, personalized wellness plan for the following user. Format the response in clean HTML using Tailwind CSS classes for styling. Ensure the content is responsive for all devices (mobile, tablet, desktop).

                **User Profile:**
                - **Primary Goal:** ${goal}
                - **Age:** ${age}
                - **Gender:** ${gender}
                - **Height:** ${height} cm
                - **Weight:** ${weight} kg
                - **Activity Level:** ${activityLevel}
                - **Dietary Preferences/Restrictions:** ${diet || 'None'}

                **Required Plan Components (Formatted in HTML):**
                1. **Introduction:** A brief, motivational intro (use 'text-lg sm:text-xl mb-4 text-gray-700').
                2. **Caloric Needs:** Estimated daily calorie target with simple explanation (use 'bg-gray-100 p-4 sm:p-6 rounded-lg mb-4').
                3. **Macronutrient Split:** Percentage split for Protein, Carbs, Fats with reasoning (use 'list-disc list-inside space-y-2').
                4. **3-Day Meal Plan:** Simple meal plan for 3 days (Breakfast, Lunch, Dinner, Snack). Use responsive tables or divs (e.g., 'table-auto w-full' for tables, or 'grid grid-cols-1 sm:grid-cols-2 gap-4').
                5. **Weekly Fitness Routine:** 5-day workout plan with daily focus and 4-5 exercises (sets/reps). Use card-like divs (e.g., 'bg-gray-100 p-4 sm:p-6 rounded-lg mb-4').
                6. **Wellness Tips:** Tips on hydration, sleep, stress (use 'list-disc list-inside space-y-2').
                7. **Disclaimer:** Short disclaimer to consult a healthcare professional (use 'text-sm text-gray-600 mb-4').

                **HTML Formatting Guidelines:**
                - Use responsive Tailwind classes (e.g., 'text-sm sm:text-base', 'p-4 sm:p-6').
                - Ensure tables have 'table-auto w-full' and cells have 'px-2 sm:px-4 py-2'.
                - Use 'overflow-x-auto' for tables or long content.
                - Make it professional and trustworthy.
            `;

            try {
                const aiResponseHtml = await getAiGeneratedPlan(userPrompt);
                planContent.innerHTML = aiResponseHtml;
                onboardingSection.classList.add('hidden');
                planDisplaySection.classList.remove('hidden');
            } catch (error) {
                console.error("Error generating plan:", error);
                planContent.innerHTML = `<p class="text-red-500 text-center text-sm sm:text-base">Failed to generate plan. Please try again later.</p>`;
                formContainer.classList.remove('hidden');
            } finally {
                loadingSection.classList.add('hidden');
            }
        });

        // API call function
        async function getAiGeneratedPlan(prompt) {
            // Note: Replace with backend proxy or environment variable in production
            const apiKey = "AIzaSyCF9BsY9yMRvE47pbV8Gz-YywUWdO0Wzww"; // Use environment variable or backend
            const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${apiKey}`;

            const payload = {
                contents: [{
                    parts: [{
                        text: prompt
                    }]
                }]
            };

            const response = await fetch(apiUrl, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload)
            });

            if (!response.ok) {
                throw new Error(`API call failed: ${response.status}`);
            }

            const result = await response.json();
            const candidate = result.candidates?.[0];
            if (candidate && candidate.content?.parts?.[0]?.text) {
                let rawText = candidate.content.parts[0].text;
                if (rawText.startsWith("```html")) rawText = rawText.substring(7);
                if (rawText.endsWith("```")) rawText = rawText.slice(0, -3);
                return rawText.trim();
            }
            throw new Error("Invalid API response");
        }

        /*
        // Social sharing (commented out; uncomment to re-enable)
        function share(platform) {
            const url = window.location.href;
            const text = "I just created a personalized AI wellness plan with Aura Wellness! Check it out: ";
            let shareUrl = "";
            if (platform === 'Twitter') {
                shareUrl = `https://twitter.com/intent/tweet?url=${encodeURIComponent(url)}&text=${encodeURIComponent(text)}`;
            } else if (platform === 'Facebook') {
                shareUrl = `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`;
            }
            window.open(shareUrl, '_blank');
        }
        */

        // Progress Tracking
        startTrackingBtn.addEventListener('click', () => {
            planDisplaySection.classList.add('hidden');
            progressTrackerSection.classList.remove('hidden');
            renderChart();
        });

        const addLogBtn = document.getElementById('add-log-btn');
        let progressData = { labels: [], weights: [] };
        let myChart;

        function renderChart() {
            const ctx = document.getElementById('progressChart').getContext('2d');
            if (myChart) myChart.destroy();
            myChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: progressData.labels,
                    datasets: [{
                        label: 'Weight (kg)',
                        data: progressData.weights,
                        borderColor: 'rgba(101, 116, 205, 1)',
                        backgroundColor: 'rgba(101, 116, 205, 0.2)',
                        fill: true,
                        tension: 0.3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: { y: { beginAtZero: false } }
                }
            });
        }

        addLogBtn.addEventListener('click', () => {
            const dateInput = document.getElementById('log-date');
            const weightInput = document.getElementById('log-weight');
            const date = dateInput.value;
            const weight = parseFloat(weightInput.value);

            if (!date || isNaN(weight)) {
                alert('Please enter a valid date and weight.');
                return;
            }

            progressData.labels.push(date);
            progressData.weights.push(weight);
            const combined = progressData.labels.map((label, index) => ({ label, weight: progressData.weights[index] }));
            combined.sort((a, b) => new Date(a.label) - new Date(b.label));
            progressData.labels = combined.map(item => item.label);
            progressData.weights = combined.map(item => item.weight);

            renderChart();
            dateInput.value = '';
            weightInput.value = '';
        });

        // Set default date
        document.getElementById('log-date').valueAsDate = new Date();
    </script>
</body>
</html>
